DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS imdb_movies;

# CREATE A NEW TABLE WITH A STRUCTURE DUPLICATED FROM THE ORIGINAL TABLE
CREATE TABLE imdb_movies
LIKE movies;

SELECT * FROM
imdb_movies;

# COPY ALL THE DATA FROM THE ORIGINAL TABLE INTO THE NEW ONE
INSERT imdb_movies
SELECT * FROM movies;

SELECT * FROM imdb_movies;

# TRIM MOVIE NAMES
SELECT MOVIES, TRIM(MOVIES)
FROM imdb_movies;

UPDATE imdb_movies
SET MOVIES = TRIM(MOVIES);


# REPLACE EMPTY RATING VALUES WITH NULL
SELECT *
FROM imdb_movies
WHERE RATING = '';

UPDATE imdb_movies
SET RATING = NULL
WHERE RATING = '';


# CONVERT RATING TO FLOATS
ALTER TABLE imdb_movies
MODIFY COLUMN RATING FLOAT;


# REPLACE EMPTY VOTES VALUES WITH NULL
SELECT VOTES
FROM imdb_movies
WHERE VOTES = '';

UPDATE imdb_movies
SET VOTES = NULL
WHERE VOTES = '';

# TRIMMING VOTE VALUES
UPDATE imdb_movies
SET VOTES = TRIM(VOTES);

SELECT VOTES
FROM imdb_movies
WHERE VOTES IS NOT NULL
ORDER BY 1;

# CHECK FOR VOTE VALUES WITH THE THOUSAND SEPARATOR, AND REMOVE THE SEPARATOR
SELECT VOTES, REPLACE(VOTES, ',', '')
FROM imdb_movies
WHERE VOTES IS NOT NULL
ORDER BY 1;

UPDATE imdb_movies
SET VOTES = REPLACE(VOTES, ',', '');

# CHECK FOR, AND REPLACE VOTE VALUES THAT WERE NOT RECORDED AS NUMBERS, AS NULLS
SELECT VOTES
FROM imdb_movies
WHERE VOTES NOT REGEXP '^[0-9]+(\.[0-9]+)?$';

UPDATE imdb_movies
SET VOTES = NULL
WHERE VOTES NOT REGEXP '^[0-9]+(\.[0-9]+)?$';

# CONVERTING VOTES TO AN INT DATATYPE
ALTER TABLE imdb_movies
MODIFY COLUMN VOTES INT;


SELECT *
FROM imdb_movies;


# TRANSFORM THE RUNTIME COLUMN
SELECT RunTime, TRIM(RunTime)
FROM imdb_movies;

UPDATE imdb_movies
SET RunTime = TRIM(RunTime);

# REPLACE VOTE VALUES THAT WERE NOT RECORDED AS NUMBERS, AS NULLS
UPDATE imdb_movies
SET RunTime = NULL
WHERE RunTime NOT REGEXP '^[0-9]+(\.[0-9]+)?$';

# ROUND UP THE VALUES TO ZERO DP
SELECT RunTime, ROUND(RunTime, 0)
FROM imdb_movies;

UPDATE imdb_movies
SET RunTime = ROUND(RunTime, 0);

# CONVERTING RUNTIME VALUES TO AN INT DATATYPE
ALTER TABLE imdb_movies
MODIFY COLUMN RunTime INT;

SELECT DISTINCT RunTime
FROM imdb_movies
WHERE RunTime IS NOT NULL
ORDER BY 1;

SELECT *
FROM imdb_movies;

SELECT STARS, TRIM(STARS)
FROM imdb_movies
WHERE STARS LIKE ' %';

UPDATE imdb_movies
SET STARS = TRIM(STARS);


SELECT *
FROM imdb_movies;


#GROSS
SELECT GROSS
FROM imdb_movies;

SELECT Gross, REPLACE(Gross, ',', '')
FROM imdb_movies;

UPDATE imdb_movies
SET Gross = REPLACE(Gross, ',', '');

UPDATE imdb_movies
SET Gross = TRIM(Gross);

# REPLACE EMPTY GROSS VALUES WITH NULLS
UPDATE imdb_movies
SET Gross = NULL
WHERE Gross = '';

# GROSS VALUES THAT WERE NOT RECORDED AS NUMBERS OR CURRENCIES
SELECT DISTINCT Gross
FROM imdb_movies
WHERE (Gross NOT LIKE '$%') AND (Gross NOT REGEXP '^[0-9]+(\.[0-9]+)?$');

# REPLACE THE ABOVE RESULTS WITH NULLS
UPDATE imdb_movies
SET Gross = NULL
WHERE (Gross NOT LIKE '$%') AND (Gross NOT REGEXP '^[0-9]+(\.[0-9]+)?$');

SELECT DISTINCT Gross
FROM imdb_movies;

# ALL GROSS VALUES RECORDED WITHOUT A CURRENCY NOTATION
SELECT DISTINCT Gross
FROM imdb_movies
WHERE Gross REGEXP '^[0-9]+(\.[0-9]+)?$';

# USING A NEW COLUMN TO SEPARATELY HANDLE THE INCONSISTENCIES IN THE GROSS COLUMN
ALTER TABLE imdb_movies
ADD COLUMN movie_gross
TEXT;

SELECT *
FROM imdb_movies;

# COPY ALL GROSS VALUES WITHOUT A CURRENCY NOTATION, TO THE NEW MOVIE_GROSS COLUMN
UPDATE imdb_movies
SET movie_gross = Gross
WHERE Gross REGEXP '^[0-9]+(\.[0-9]+)?$';

SELECT Gross, movie_gross
FROM imdb_movies
WHERE Gross IS NOT NULL;

# NULLIFY ALL GROSS VALUES WITHOUT A CURRENCY NOTATION FROM THE GROSS COLUMN
# THIS HELPS TO WORK ON THE ONES WITH A NOTATION SEPARATELY FROM THOS THAT DONT, IN THE MOVIE_GROSS COLUMN
UPDATE imdb_movies
SET Gross = NULL
WHERE Gross REGEXP '^[0-9]+(\.[0-9]+)?$';

SELECT Gross
FROM imdb_movies
WHERE Gross REGEXP '^[0-9]+(\.[0-9]+)?$';


SELECT Gross, movie_gross
FROM imdb_movies
WHERE Gross IS NOT NULL;

# REMOVE THE MILLION SUFFIX FROM GROSS VALUES
SELECT Gross, TRIM(TRAILING 'M' FROM Gross)
FROM imdb_movies
WHERE Gross IS NOT NULL;

UPDATE imdb_movies
SET Gross = TRIM(TRAILING 'M' FROM Gross)
WHERE Gross IS NOT NULL;

# REMOVE THE DOLLAR PREFIX FROM GROSS VALUES
SELECT Gross, TRIM(LEADING '$' FROM Gross)
FROM imdb_movies
WHERE Gross IS NOT NULL;

UPDATE imdb_movies
SET Gross = TRIM(LEADING '$' FROM Gross)
WHERE Gross IS NOT NULL;

# CHANGE GROSS VALUES TO FLOAT SO AS TO STANDARDIZE THE VALUES
ALTER TABLE imdb_movies
MODIFY COLUMN Gross FLOAT;

SELECT Gross, (Gross * 1000000)
FROM imdb_movies
WHERE Gross IS NOT NULL;

UPDATE imdb_movies
SET Gross = (Gross * 1000000);

# CHANGE ALL GROSS AND MOVIE_GROSS VALUES TO INTEGERS
SELECT Gross
FROM imdb_movies
WHERE Gross IS NOT NULL;

ALTER TABLE imdb_movies
MODIFY COLUMN Gross INT;

SELECT movie_gross
FROM imdb_movies
WHERE movie_gross IS NOT NULL;

ALTER TABLE imdb_movies
MODIFY COLUMN movie_gross INT;

# NULLIFY ALL MOVIE_GROSS VALUES WITH AN UNREALISTICALLY LOW VALUE
SELECT *
FROM imdb_movies
WHERE movie_gross < 100000;

UPDATE imdb_movies
SET movie_gross = NULL
WHERE movie_gross < 100000;


# STANDARDISING THE YEAR COLUMN DATA
# CHECK IF THERE ARE ANY ENTRIES THAT HAVE LEADING OR TRAILING SPACES
SELECT `YEAR`
FROM imdb_movies
WHERE `YEAR` LIKE ' % ';

# REMOVING LEADING AND TRAILING BRACKETS FROM YEAR VALUES
SELECT `YEAR`, TRIM(LEADING '(' FROM `YEAR`)
FROM imdb_movies;

UPDATE imdb_movies
SET `YEAR` = TRIM(LEADING '(' FROM `YEAR`);

SELECT `YEAR`, TRIM(TRAILING ')' FROM `YEAR`)
FROM imdb_movies;

UPDATE imdb_movies
SET `YEAR` = TRIM(TRAILING ')' FROM `YEAR`);

UPDATE imdb_movies
SET `YEAR` = TRIM(`YEAR`);

SELECT `YEAR`, REPLACE(`YEAR`, 'I', '')
FROM imdb_movies
WHERE `YEAR` LIKE '%I%';

UPDATE imdb_movies
SET `YEAR` = REPLACE(`YEAR`, 'I', '');

SELECT `YEAR`, REPLACE(`YEAR`, '–', '')
FROM imdb_movies
WHERE `YEAR` LIKE '%–';

UPDATE imdb_movies
SET `YEAR` = REPLACE(`YEAR`, '–', '')
WHERE `YEAR` LIKE '%–';

UPDATE imdb_movies
SET `YEAR` = TRIM(`YEAR`);

SELECT DISTINCT `YEAR`
FROM imdb_movies;

SELECT `YEAR`, REPLACE(`YEAR`, ')', '')
FROM imdb_movies
WHERE `YEAR` LIKE '%)%';

UPDATE imdb_movies
SET `YEAR` = REPLACE(`YEAR`, ')', '')
WHERE `YEAR` LIKE '%)%';

SELECT `YEAR`, REPLACE(`YEAR`, '(', '')
FROM imdb_movies
WHERE `YEAR` LIKE '%(%';

UPDATE imdb_movies
SET `YEAR` = REPLACE(`YEAR`, '(', '')
WHERE `YEAR` LIKE '%(%';

UPDATE imdb_movies
SET `YEAR` = TRIM(`YEAR`);

SELECT DISTINCT `YEAR`
FROM imdb_movies;

# CREATE TWO NEW COLUMNS TO SPLIT THE YEARS OF MOVIES
ALTER TABLE imdb_movies
ADD COLUMN start_year TEXT;

ALTER TABLE imdb_movies
ADD COLUMN end_year TEXT;

SELECT `YEAR`, start_year, end_year
FROM imdb_movies;

UPDATE imdb_movies
SET start_year = `YEAR`
WHERE `YEAR` LIKE '____';

SELECT `YEAR`, SUBSTR(`YEAR`, 6), start_year, end_year
FROM imdb_movies
WHERE LENGTH(`YEAR`) > 4;

UPDATE imdb_movies
SET end_year = SUBSTR(`YEAR`, 6)
WHERE LENGTH(`YEAR`) > 4;

SELECT `YEAR`, SUBSTR(`YEAR`, 1, 4), start_year, end_year
FROM imdb_movies
WHERE LENGTH(`YEAR`) > 4;

UPDATE imdb_movies
SET start_year = SUBSTR(`YEAR`, 1, 4)
WHERE LENGTH(`YEAR`) > 4;

SELECT `YEAR`, start_year, end_year
FROM imdb_movies;


# GENRE
UPDATE imdb_movies
SET GENRE = TRIM(GENRE);


SELECT MOVIES, `YEAR`, start_year, end_year, GENRE, RATING, VOTES, RunTime, Gross, movie_gross, `ONE-LINE`, STARS
FROM imdb_movies;


# RECONCILING GROSS VALUES
SELECT Gross, movie_gross
FROM imdb_movies
WHERE movie_gross IS NOT NULL;

UPDATE imdb_movies
SET Gross = movie_gross
WHERE movie_gross IS NOT NULL;

SELECT Gross
FROM imdb_movies
WHERE Gross < 100000;

UPDATE imdb_movies
SET Gross = NULL
WHERE Gross < 100000;


SELECT MOVIES, `YEAR`, start_year, end_year, GENRE, RATING, VOTES, RunTime, Gross, movie_gross, `ONE-LINE`, STARS
FROM imdb_movies;

SELECT *
FROM imdb_movies;


# DELETE COLUMNS THAT ARE NOT USEFUL FOR ANALYSIS
ALTER TABLE imdb_movies
DROP COLUMN `ONE-LINE`;

ALTER TABLE imdb_movies
DROP COLUMN STARS;

ALTER TABLE imdb_movies
DROP COLUMN movie_gross;

SELECT *
FROM imdb_movies;

SELECT MOVIES, `YEAR`, start_year, end_year, GENRE, RATING, VOTES, RunTime, Gross
FROM imdb_movies;


-- ENDDDDD OF PROJECTTTTTTT!!!!!!!